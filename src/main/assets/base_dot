1、Activity生命周期？
onCreate-onStart-onResume-onPause-onStop-onDestroy

2、Service生命周期？
Service分两种启动方式:startService和bindService
startService的启动流程是:startService-onCreate(多次调用startService只会调用一次)-onStartCommand(多次调用startService也会多次调用)
                         stopService-onDestroy
                         stopService调用时会执行onDestroy方法;startService(intent)传值的时候一定要记得判空处理
bindService的启动流程:bindService-onCreate-onBind-unBind-onDestroy
                     只要启动了bindService就会执行onCreate和onBind方法一次,如果想要解除绑定需要调用unbindService进行解绑;
                     bindService通过ServiceConnection的回调onServiceConnected获取绑定对象;bindService的生命随activity的
                     销毁而销毁
两者区别:startService开启服务之后只要不调用stopService方法该服务就一直运行中,直至APP销毁;而bindService开启后如果不调用unBindService,
        其生命周期是与activity的生命周期一致的;如果先startService之后再bindService方法必须要先stopService服务之后再unbindService才能
        将服务关闭

3.Dalvik虚拟机和JAVA虚拟机的区别
Dalvik虚拟机是Android的寄存器,而java虚拟机是运行在栈内存中的;Dalvik虚拟机会将java文件通过de工具编译成.dex的文件,而java虚拟机会将java文件编译
成.class的字节文件;dex文件格式可以减少整体文件尺寸，提高I/O操作的类查找速度。 　　


4.activity的启动过程
(1).通过Binder进程通讯进入到ActivityMangerService,然后调用ActivityMangerService.startActivity()
(2).ActivityMangerService调用ActivityStack.startActivityMayWait做准备启动的Activity的工作
(3).ActivityStack通知ApplicationThread进行Activity的启动调度,实际就是调用Launcher进程启动调用Activity
(4).ApplicationThread实际不执行真正的项目启动工作,而是交给ActivityMangerService.activityPause接口判断是否要创建新的进程来启动Activity的
(5).ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程
(6).ActivityManagerService调用ApplicationThread.scheduleLaunchActivity接口来启动Activity的操作
(7).ApplicationThread把启动的操作转发给ActivityThread,ActivityThread通过ClassLoader导入相关的Activity类启动


5.Broadcast注册方式与区别
广播注册有两种方式:动态注册和清单文件注册
动态注册的广播生命周期随着页面的退出或者主动解绑广播而销毁结束;清单文件注册的广播属于常驻型广播,生命周期更长,不随页面的生命周期而改变,占用CPU的资源。

6.进程保活（不死进程）
(1).不同的app进程，用广播相互唤醒（包括利用系统提供的广播进行唤醒）
(2).系统api启动一个前台的Service进程，这样会在系统的通知栏生成一个Notification，用来让用户知道有这样一个app在运行着，哪怕当前的app退到了后台

7.Context的理解
Context是一个抽象基类,即为上下文环境.
Context有两个子类:ContextImpl和ContextWrapper类,ContextImpl是Context的实现类.
ContextWrapper类有三个直接的子类:ContextThemeWrapper,Application和Service.其中ContextThemeWrapper类是主题封装类,直接的子类就是Activity,
绝大多数情况下这三个类型的context是可以通用的,但是dialog的上下文必须依赖于activity,getApplicationContext()和getApplication()方法得到的对象
都是同一个application对象，只是对象的类型不一样。


8.理解Activity，View,Window三者关系
Activity的子view就是PhoneWindow,PhoneWindow的子类是DecorView,DecorView是由actionbar和ContentParent组成的
Activity像一个工匠（控制单元），Window像窗户（承载模型），View像窗花（显示视图）LayoutInflater像剪刀，Xml配置像窗花图纸。


9、四种LaunchMode及其使用场景
队列先进先出，栈先进后出
(1)standard标准模式
按照默认的启动顺序将activity放入到栈中,绝大多数activity都是这种默认的启动方式
(2)singleTop单一栈顶模式
activity设置成了singleTop模式,如果该activity处于栈的顶部,则直接调用位于栈顶的这个activity,并不会新建一个压入栈中,此时会触发onNewIntent()方法得到该intent的实例对象
如果该activity并不位于栈顶,则新建一个activity压入栈中,与之前的activity实例并存
新闻详情或者手势解锁可以用此模式,MainActivity也是用此模式
(3)singleTask单一任务栈模式
该模式下的activity如果在栈中已经存在,则直接将该activity置于栈顶并销毁它在栈之上的所有activity的实例
使用场景如开启浏览器的主界面
(4)singleInstance模式
该模式下的独享一个任务栈,不允许存在多个activity的实例共享一个任务栈
使用场景如打电话发短信的界面

10、保存Activity状态
onSaveInstanceState方法

11.

















14、Android中的几种动画

15、Android中跨进程通讯的几种方式

16、AIDL理解
此处延伸：简述Binder

17、Handler的原理

18、Binder机制原理

19、热修复的原理

20、Android内存泄露及管理

21、Fragment与Fragment、Activity通信的方式

22、Android UI适配

23、app优化

24、图片优化

25、HybridApp WebView和JS交互

26、JAVA GC原理

27、ANR

28、设计模式
此处延伸：Double Check的写法被要求写出来。

29、RxJava

30、MVP，MVC，MVVM
此处延伸：手写mvp例子，与mvc之间的区别，mvp的优势


31、手写算法（选择冒泡必须要会）
32、JNI

33、RecyclerView和ListView的区别

34、Universal-ImageLoader，Picasso，Fresco，Glide对比

42、Xutils, OKhttp, Volley, Retrofit对比


Java
1、线程中sleep和wait的区别

2、Thread中的start()和run()方法有什么区别

3、关键字final和static是怎么使用的。

4、String,StringBuffer,StringBuilder区别

5、Java中重载和重写的区别：

6、Http https区别
此处延伸：https的实现原理

7、Http位于TCP/IP模型中的第几层？为什么说Http是可靠的数据传输协议？

8、HTTP链接的特点

9、TCP和UDP的区别

10、Socket建立网络连接的步骤